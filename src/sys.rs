/* automatically generated by rust-bindgen 0.69.4 */

pub type __dev_t = ::core::ffi::c_ulong;
pub type dev_t = __dev_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udev {
    _unused: [u8; 0],
}
extern "C" {
    pub fn udev_ref(udev: *mut udev) -> *mut udev;
}
extern "C" {
    pub fn udev_unref(udev: *mut udev) -> *mut udev;
}
extern "C" {
    pub fn udev_new() -> *mut udev;
}
extern "C" {
    pub fn udev_get_log_priority(udev: *mut udev) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_set_log_priority(udev: *mut udev, priority: ::core::ffi::c_int);
}
extern "C" {
    pub fn udev_get_userdata(udev: *mut udev) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn udev_set_userdata(udev: *mut udev, userdata: *mut ::core::ffi::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udev_list_entry {
    _unused: [u8; 0],
}
extern "C" {
    pub fn udev_list_entry_get_next(list_entry: *mut udev_list_entry) -> *mut udev_list_entry;
}
extern "C" {
    pub fn udev_list_entry_get_by_name(
        list_entry: *mut udev_list_entry,
        name: *const ::core::ffi::c_char,
    ) -> *mut udev_list_entry;
}
extern "C" {
    pub fn udev_list_entry_get_name(list_entry: *mut udev_list_entry)
        -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn udev_list_entry_get_value(
        list_entry: *mut udev_list_entry,
    ) -> *const ::core::ffi::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udev_device {
    _unused: [u8; 0],
}
extern "C" {
    pub fn udev_device_ref(udev_device: *mut udev_device) -> *mut udev_device;
}
extern "C" {
    pub fn udev_device_unref(udev_device: *mut udev_device) -> *mut udev_device;
}
extern "C" {
    pub fn udev_device_get_udev(udev_device: *mut udev_device) -> *mut udev;
}
extern "C" {
    pub fn udev_device_new_from_syspath(
        udev: *mut udev,
        syspath: *const ::core::ffi::c_char,
    ) -> *mut udev_device;
}
extern "C" {
    pub fn udev_device_new_from_devnum(
        udev: *mut udev,
        type_: ::core::ffi::c_char,
        devnum: dev_t,
    ) -> *mut udev_device;
}
extern "C" {
    pub fn udev_device_new_from_subsystem_sysname(
        udev: *mut udev,
        subsystem: *const ::core::ffi::c_char,
        sysname: *const ::core::ffi::c_char,
    ) -> *mut udev_device;
}
extern "C" {
    pub fn udev_device_new_from_device_id(
        udev: *mut udev,
        id: *const ::core::ffi::c_char,
    ) -> *mut udev_device;
}
extern "C" {
    pub fn udev_device_new_from_environment(udev: *mut udev) -> *mut udev_device;
}
extern "C" {
    pub fn udev_device_get_parent(udev_device: *mut udev_device) -> *mut udev_device;
}
extern "C" {
    pub fn udev_device_get_parent_with_subsystem_devtype(
        udev_device: *mut udev_device,
        subsystem: *const ::core::ffi::c_char,
        devtype: *const ::core::ffi::c_char,
    ) -> *mut udev_device;
}
extern "C" {
    pub fn udev_device_get_devpath(udev_device: *mut udev_device) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn udev_device_get_subsystem(udev_device: *mut udev_device) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn udev_device_get_devtype(udev_device: *mut udev_device) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn udev_device_get_syspath(udev_device: *mut udev_device) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn udev_device_get_sysname(udev_device: *mut udev_device) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn udev_device_get_sysnum(udev_device: *mut udev_device) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn udev_device_get_devnode(udev_device: *mut udev_device) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn udev_device_get_is_initialized(udev_device: *mut udev_device) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_device_get_devlinks_list_entry(
        udev_device: *mut udev_device,
    ) -> *mut udev_list_entry;
}
extern "C" {
    pub fn udev_device_get_properties_list_entry(
        udev_device: *mut udev_device,
    ) -> *mut udev_list_entry;
}
extern "C" {
    pub fn udev_device_get_tags_list_entry(udev_device: *mut udev_device) -> *mut udev_list_entry;
}
extern "C" {
    pub fn udev_device_get_current_tags_list_entry(
        udev_device: *mut udev_device,
    ) -> *mut udev_list_entry;
}
extern "C" {
    pub fn udev_device_get_sysattr_list_entry(
        udev_device: *mut udev_device,
    ) -> *mut udev_list_entry;
}
extern "C" {
    pub fn udev_device_get_property_value(
        udev_device: *mut udev_device,
        key: *const ::core::ffi::c_char,
    ) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn udev_device_get_driver(udev_device: *mut udev_device) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn udev_device_get_devnum(udev_device: *mut udev_device) -> dev_t;
}
extern "C" {
    pub fn udev_device_get_action(udev_device: *mut udev_device) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn udev_device_get_seqnum(udev_device: *mut udev_device) -> ::core::ffi::c_ulonglong;
}
extern "C" {
    pub fn udev_device_get_usec_since_initialized(
        udev_device: *mut udev_device,
    ) -> ::core::ffi::c_ulonglong;
}
extern "C" {
    pub fn udev_device_get_sysattr_value(
        udev_device: *mut udev_device,
        sysattr: *const ::core::ffi::c_char,
    ) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn udev_device_set_sysattr_value(
        udev_device: *mut udev_device,
        sysattr: *const ::core::ffi::c_char,
        value: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_device_has_tag(
        udev_device: *mut udev_device,
        tag: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_device_has_current_tag(
        udev_device: *mut udev_device,
        tag: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udev_monitor {
    _unused: [u8; 0],
}
extern "C" {
    pub fn udev_monitor_ref(udev_monitor: *mut udev_monitor) -> *mut udev_monitor;
}
extern "C" {
    pub fn udev_monitor_unref(udev_monitor: *mut udev_monitor) -> *mut udev_monitor;
}
extern "C" {
    pub fn udev_monitor_get_udev(udev_monitor: *mut udev_monitor) -> *mut udev;
}
extern "C" {
    pub fn udev_monitor_new_from_netlink(
        udev: *mut udev,
        name: *const ::core::ffi::c_char,
    ) -> *mut udev_monitor;
}
extern "C" {
    pub fn udev_monitor_enable_receiving(udev_monitor: *mut udev_monitor) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_monitor_set_receive_buffer_size(
        udev_monitor: *mut udev_monitor,
        size: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_monitor_get_fd(udev_monitor: *mut udev_monitor) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_monitor_receive_device(udev_monitor: *mut udev_monitor) -> *mut udev_device;
}
extern "C" {
    pub fn udev_monitor_filter_add_match_subsystem_devtype(
        udev_monitor: *mut udev_monitor,
        subsystem: *const ::core::ffi::c_char,
        devtype: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_monitor_filter_add_match_tag(
        udev_monitor: *mut udev_monitor,
        tag: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_monitor_filter_update(udev_monitor: *mut udev_monitor) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_monitor_filter_remove(udev_monitor: *mut udev_monitor) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udev_enumerate {
    _unused: [u8; 0],
}
extern "C" {
    pub fn udev_enumerate_ref(udev_enumerate: *mut udev_enumerate) -> *mut udev_enumerate;
}
extern "C" {
    pub fn udev_enumerate_unref(udev_enumerate: *mut udev_enumerate) -> *mut udev_enumerate;
}
extern "C" {
    pub fn udev_enumerate_get_udev(udev_enumerate: *mut udev_enumerate) -> *mut udev;
}
extern "C" {
    pub fn udev_enumerate_new(udev: *mut udev) -> *mut udev_enumerate;
}
extern "C" {
    pub fn udev_enumerate_add_match_subsystem(
        udev_enumerate: *mut udev_enumerate,
        subsystem: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_enumerate_add_nomatch_subsystem(
        udev_enumerate: *mut udev_enumerate,
        subsystem: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_enumerate_add_match_sysattr(
        udev_enumerate: *mut udev_enumerate,
        sysattr: *const ::core::ffi::c_char,
        value: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_enumerate_add_nomatch_sysattr(
        udev_enumerate: *mut udev_enumerate,
        sysattr: *const ::core::ffi::c_char,
        value: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_enumerate_add_match_property(
        udev_enumerate: *mut udev_enumerate,
        property: *const ::core::ffi::c_char,
        value: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_enumerate_add_match_sysname(
        udev_enumerate: *mut udev_enumerate,
        sysname: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_enumerate_add_match_tag(
        udev_enumerate: *mut udev_enumerate,
        tag: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_enumerate_add_match_parent(
        udev_enumerate: *mut udev_enumerate,
        parent: *mut udev_device,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_enumerate_add_match_is_initialized(
        udev_enumerate: *mut udev_enumerate,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_enumerate_add_syspath(
        udev_enumerate: *mut udev_enumerate,
        syspath: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_enumerate_scan_devices(udev_enumerate: *mut udev_enumerate) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_enumerate_scan_subsystems(
        udev_enumerate: *mut udev_enumerate,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_enumerate_get_list_entry(
        udev_enumerate: *mut udev_enumerate,
    ) -> *mut udev_list_entry;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udev_queue {
    _unused: [u8; 0],
}
extern "C" {
    pub fn udev_queue_ref(udev_queue: *mut udev_queue) -> *mut udev_queue;
}
extern "C" {
    pub fn udev_queue_unref(udev_queue: *mut udev_queue) -> *mut udev_queue;
}
extern "C" {
    pub fn udev_queue_get_udev(udev_queue: *mut udev_queue) -> *mut udev;
}
extern "C" {
    pub fn udev_queue_new(udev: *mut udev) -> *mut udev_queue;
}
extern "C" {
    pub fn udev_queue_get_kernel_seqnum(udev_queue: *mut udev_queue) -> ::core::ffi::c_ulonglong;
}
extern "C" {
    pub fn udev_queue_get_udev_seqnum(udev_queue: *mut udev_queue) -> ::core::ffi::c_ulonglong;
}
extern "C" {
    pub fn udev_queue_get_udev_is_active(udev_queue: *mut udev_queue) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_queue_get_queue_is_empty(udev_queue: *mut udev_queue) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_queue_get_seqnum_is_finished(
        udev_queue: *mut udev_queue,
        seqnum: ::core::ffi::c_ulonglong,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_queue_get_seqnum_sequence_is_finished(
        udev_queue: *mut udev_queue,
        start: ::core::ffi::c_ulonglong,
        end: ::core::ffi::c_ulonglong,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_queue_get_fd(udev_queue: *mut udev_queue) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_queue_flush(udev_queue: *mut udev_queue) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn udev_queue_get_queued_list_entry(udev_queue: *mut udev_queue) -> *mut udev_list_entry;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udev_hwdb {
    _unused: [u8; 0],
}
extern "C" {
    pub fn udev_hwdb_new(udev: *mut udev) -> *mut udev_hwdb;
}
extern "C" {
    pub fn udev_hwdb_ref(hwdb: *mut udev_hwdb) -> *mut udev_hwdb;
}
extern "C" {
    pub fn udev_hwdb_unref(hwdb: *mut udev_hwdb) -> *mut udev_hwdb;
}
extern "C" {
    pub fn udev_hwdb_get_properties_list_entry(
        hwdb: *mut udev_hwdb,
        modalias: *const ::core::ffi::c_char,
        flags: ::core::ffi::c_uint,
    ) -> *mut udev_list_entry;
}
extern "C" {
    pub fn udev_util_encode_string(
        str_: *const ::core::ffi::c_char,
        str_enc: *mut ::core::ffi::c_char,
        len: usize,
    ) -> ::core::ffi::c_int;
}
